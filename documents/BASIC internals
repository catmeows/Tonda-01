

BAS_PROG       1st line
               line: line=2B,length=2B,tokens,EOL
               $FFFF

TOKENS         ASCII, KEYWORDS
               13($0D) - EOL
               14($0E) - NUMBER: 14, exponent, mantisa 4, mantisa 3, mantisa 2, mantisa 1
               15($0F) - SHORT: 15, hi, lo

               
BAS_IDS        1st id
               id: length=1B, characters
               $00
                       
BAS_VARS       ptr to procedures/labels
               ptr to global numbers
               ptr to global numbers arrays
               ptr to global string arrays
               ptr to global string
               ptr to global lists
               ptr to local variables
               ptr to edit line

               
(PROCEDURES)   procedure: id=2B, length=1B, type=1B, ptr=2B, paramCount=1B, paramItems=xB
                          id...item in id table
                          length...length of entry
                          type...label type: 1=goto target, 2=procedure target
                          ptr...line pointer
                          paramCount...parameter count
                          paramItems...parameter type
                       
(INTS)         int: id=2B, value=4B                      
                    $FFFF
                    
(FLOATS)       float: id=2B, value=5B


basic line 1 - pointed BAS_PROG
basic line X
Id table - pointed BAS_PROG_ID_TABLE
Variable table - pointed BAS_PROG_VAR_TABLE



Find variable by Id
Search local
Search global




RUN -> CLEAR, GOTO
CLEAR -> clear variables, id table garbage collection

id table garbage collection:
 projdi vsechny radky a pokazde kdyz najdes v radku id, tak ho najdi i v tabulce a posun ho na x-te misto v tabulce
 pokud je konec programu smaz vsechna id ktera jeste zustala (nejsou v programu pouzita)
 resize oblasti -> znovuziskani pameti




Editor


Id
 len, name

Variable
 Global loops
 Global integer (
 Global float
 Global integer array
 Global float array
 String (Type, Id, Size,Len, content)
 String array
 List



Types:
Integer
Float
String
Integer array:

Float array:
String array

VARIABLES on stack:
<-- lower x higher -->
TYPE: EndOfStack $00
      Int32      $01 xx xx xx xx
      Float      $02 xx xx xx xx xx xx
      String     $03 ll ll xx xx xx xx ...  



Array:






Special tokens:
  LABEL
  DEFPROC







TYPES

Integer - 32bit signed integer
Float - Binary integer decimal - 

VARIABLES
Pointer to line table
Pointer to procedure table
Pointer to 

Line table:
Is generated whenever BASIC enters execution mode.
1) Scan whole program and find highest line number
2) Scan whole program again and store lines that divide program into 8 parts
8 x [line number, adress of line] 

Procedure table:
Is cleared whenever BASIC enters execution mode
Is updated during runtime whenever not yet known procedure is called
[offset to next entry, entry name, adress of procedure, number of parameters, types]



PROCEDURES

PROC foo:PARAM 


PROC name_id(var_type,var_id, var_type) 

Procedures are called by name.

  1) Check procedure name in table
  2) If name exists, jump to line number
  3) Search program for procedure declaration (line starting with PROC name)
  4) If found, add procedure name into table and go to step 1)
  5) Throw error "P Procedure not found"
  
  set Y to procedure table
@nextentry
  read uint8 into B from Y and increment Y
  B==0 ? return
  set U to zero terminated string
@nextchar
  read char into A from stack U and increment U
  A==0 ? jump @found
  cmp byte at Y with A and increment Y
  if equals jump to @nextchar
@falsefound  
  add B to Y
  jump @nextentry
@found
  is next character at Y string terminator and increment Y
  jump @falsefound
  read uint16 into D from Y and return
  
  ----------------------------------------------------
  
  set Y to start of program
  skip line number
  read line length
  check first token on line
  is it PROC ?
  if it is then compare with string at U
    
  
  
Executing procedure
  1) Skip procedure declaration
  2) Create variable frame
  3) Create space for parameters inside procedure frame
  4) Copy parameters from stack and check 
  
  

*COMMANDS

noArgument   nothingOrNumber   number        number,number    variable

DO           RUN               PAUSE         POKE
ENDIF        LIST              BORDER        DOKE
STOP         RESTORE           PAPER         COLOR
RESUME       CLEAR             INK
REPEAT       CLS               INVERSE
EXIT         RANDOMIZE         CSIZE
NEW

BEEP(C) - two integer numbers
CLS(A) - no argument
CLSW(A) - no argument
MODE(B) - one integer number
WINDOW - nothing or four integer numbers
CLEAR - nothing, or one integer or variableId
BORDER(B) - one integer number
PAPER(B) - one integer number
INK(B) - one integer number
PAUSE(B) - one integer number
GOTO - label
RUN nothing or label
STOP(A) nothing
LIST nothing or integer or label
LET vaiableId

PLOT(C) - two integers
DRAW(C) - two integers
PAINT(D) - three integers
CIRCLE(D) - three integers

POKE(C) - two integers
DOKE(C) - two integers
MEMFILL(D) three integers
MEMCOPY(D) three integers

RANDOMIZE(I) nothing or one integer
RESTORE - nothing or label
SWAP - two variableIds
TRON - label
TROFF(A) - nothing
PLAY - string

DO(A) - nothing
WHILE - one integer
REPEAT(A) - nothing
EXIT(A) - nothing
CONTINUE(A) - nothing
RESUME(A) - nothing

FOR TO STEP 
NEXT variableId

LOAD, VERIFY, MERGE DATA/CODE- device, filename
SAVE device, filename DATA/CODE/LINE
ERASE device, filename
COPY device, filename TO device, filename
PROC label
RETURN - variable or constant list
CONST

STYLE(B) - one integer (light, dark, classic)

*FUNCTIONS

ABS(E) - number: absolute value
CODE(F) - string: ascii code of first character
INT(G) - number:
SGN(G) - number:
SQR(G) - number:
PI(A) - nothing: pi 
EUL(A) - nothing: euler
ISUCASE(F) - string: is upper case
ISLCASE(F) - string: is lower case
ISALPHA(F) - string: is alpha
ISDIGIT(F) - string: is digit
UCASE$(F) - string
LCASE$(F) - string
STR$(E) - one number:conver number to string
RND(I) - nothing or one integer
TIME(A) - nothing
STICK(B) - what to read (joy 1/2 direction/fire
SPACE$(B) - return string of n spaces
HEX$(B) - return number in hexadecimal format
HEX(F) - parse hexadecimal string
MAX
MIN
MAT
INDEXOF - string, string
LASTINDEX - string, string
COMPSTR - 


class:
A - no argument
B - one integer number
C - two integer numbers
D - three integers
E - one number
F - one string
G - one number
H - one string, one number
I - nothing or one integer


Errors:

numberOfLine:numberOfStatement errorMessage token,value

0-OK
1-Invalid argument
2-Variable not found:
3-Integer out of range
4-Number is too big



PENCOLOUR 0-3, 0-15

PRINT
 AT x,y
 AT x
 INK
 PAPER 
 OVER 0,1,2,3
 INVERSE 0,1
 PEN 0,1,2,3
 WINDOW
 
PLOT
 INK
 PAPER
 OVER
 PEN
 WINDOW
DRAW
 INK
 PAPER
 OVER
 PEN
 WINDOW
CIRLCE
 INK
 PAPER
 OVER
 PEN
 WINDOW
FILL
 INK
 PAPER
 OVER
 PEN
 WINDOW

POINT
ATTR
SCREEN$

BEEP
PLAY 
 
 
calcStackConst
    LDB #$05                      ;2
    LEAU -5, U                    ;5
    LDX ,S                        ;5
calcStackConst1
    LDA ,X+                       ; 6
    STA ,U+                       ; 6
    DECB                          ; 2 * 5 = 70
    BNE calcStackConst1           ;3
    STX ,S                        ;5
    RTS                           ;5 = 95