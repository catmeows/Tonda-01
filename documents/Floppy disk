Tonda01 uses 35 track single density single drive.
Tracks are numbered 0 to 34.
Each track has single sector of 2816 bytes.
Track 0 contains disk catalogue, tracks 1-34 contains data.
Single side of disk can store 95744 bytes.


Track structure:
 Header: 16*pilot byte + 3 bytes $D5 $F5 $B5 + 1 byte with track id + 1 byte with track id (for verification) + 1*byte $D5
 Data: 16*pilot byte + 3 bytes $D5 $F5 $AS + 2816 bytes of data + 2 bytes of CRC + 1*byte $D5
 
Catalogue:
 Catalogue has 88 records, each 32 bytes long.
 First record is volume description
  00-15 Volume name
  16-
 Second and all other records
  00    Type: Empty, Basic, Code, Integer array, String array, Float array, Text, 
  01-16 File name
  17
 
Controller has following properties:
 Reading disk:
 Setting ReadDisk line low.
 It reads bits and shift them into 8 bit shift register until b7 (most significant bit) of shift register is set to '1'.
 When b7 is set, incoming zeroes are ignored.
 When next bit is '1', controller waits for another bit X then clears shift register, shift '1' and then X into shift register.
 That allows CPU to poll shift register content until b7 is set and then read a byte.
 Using pilot "byte" 111111110b (9bits) controller can synchronize. It takes 7 pilot bytes to be fully synchronized.
 
 Regular bytes are encode as in FM scheme: 1D1D1D1D, where D are data bits. So it takes two bytes on disk to store single data bit.
 Values $D5, $F5, $B5, $AD cannot occur in regular data so they are used as mark bytes to identify header and data sections.
 
 Pseudo code for reading data from single track/sector:
 
 _read_sector
          set ReadDisk line low
 _read_header
          read pilot subroutine
          check if next byte is $B5
          if not $B5 jump back to read header
          read 3 bytes into temporary area
          check that 3rd byte is $D5
          check that 1st byte xor 2nd byte is zero
          now, 1st byte is current track
          check we are on correct track, exit if no
 _read_data
          read pilot subroutine
          check if next byte is $AD
          if not go back to _read_data
          read 2816 bytes of data + 2 bytes of crc + 1 byte $D5
          compute crc, check last byte is $D5
          end
          
 _read_pilot
         read byte subroutine
         if byte is not $FF jump back to _read_pilot
 _read_pilot_sync        
         read byte subroutine
         if byte is $FF jump back to _read_pilot_sync
         if byte is not $D5 jump back to _read_pilot
         read byte subroutine
         if byte is not $F5 jump back to _read_pilot
         exit
         
 _read_byte
         poll shift register
         if bit 7 is set then increase byte_read_count and exit
         otherwise jump back to _read_byte
          
 timeout mechanism:
         fail read pilot after reading 65535 bytes (little bit more than eleven revolutions)
          
 
 Writing disk:
 Setting WriteDisk line low.
 When controller finds out WriteDisk line is low, it reads byte (8 bits) from data latch and reads 1 bit from signal pilot latch.
 Controller shifts all 8 bits to disk, if bit in signal pilot latch is set, it will write additional '0'. After last bit written, controller reads another byte from data latch and bit from signal pilot latch.
 
 Pseudo code
 
 _write_sector (assuming we are on correct track)
        jump to read header subroutine
        set read line high
        set write line low
        repeat 16 times:
          put $FF into data latch
          put '1' into pilot signal latch
          read shift register
          wait until lower 7 bits are reset: that means controller is going to output either 
                        1D (data byte with lowest bit reset) or 
                        D (data byte with lowest bit set) or 
                        10 (pilot signal)
                        in all cases controller will read data/pilot latch within no more than 2*4us ~ 14 cycles
                        wait some time and jump to repeat
        
        
Interfacing
-select drive line
-step motor line 0
-step motor line 1
-step motor line 2
-step motor line 3
-head on track 0 signal
-write protect signal
-8xdata latch
-pilot signal latch
-write signal
-read signal
        
 
