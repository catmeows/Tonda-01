Tonda01 uses 40 track single density single drive.
Tracks are numbered 0 to 39.
Each track has single sector of 2816 bytes.
Track 0 contains disk catalogue, tracks 1-39 contains data.
Single side of disk can store 109824 bytes.


Interfacing:
Disk is driven by two ports $BFFE, $BFFF.

Write BFFE - byte to write
Read  BFFE - content of shift register

Write BFFF - xxxxdaaa - d..data bit, aaa..address
                        aaa=000 track phase 0 off/on 
                            001 track phase 1 off/on
                            010 track phase 2 off/on
                            011 track phase 3 off/on
                            100 drive 0/1
                            101 motor on
                            110 mode write/read
                            111 mode write normal/write long
Read BFFF - xxxxatwp - a..ack byte, t..track 0, w..write protect, p..disk present 

Track structure:
 Header: 16*pilot byte + 3 bytes $D5 $F5 $B5 + 1 byte with track id + 1 byte with track id (for verification) + 1*byte $D5
 Data: 16*pilot byte + 3 bytes $D5 $F5 $BD + 2816 bytes of data + 2 bytes of CRC + 1*byte $D5
 
 regular data - 1x1x 1x1x
 $D5 -          1101 0101
 $F5 -          1111 0101
 $B5 -          1011 0101
 $BD -          1011 1101
 
Catalogue - track 0 (840B):
 Disk header (19B)
 39x File entry (741B)
 Track map (39B)
 
 Disk header (19B)
 Diskname        12B
 Tracks           1B how many tracks on side
 Free             1B how many tracks are free
 Version          1B version of disk format
 Autoboot         1B file entry
 Reserved         3B reserved
 
  
 File entry (19B):
 Filename        12B 
 Type             1B  B-Basic, C-Code, V-variable, $00-empty
 Length           2B
 Attribute        2B  
 Start track      1B
 Flag             1B  00-normal, 01-write protected
 
 Track map:
 39 bytes
 Values: $00       unused
         $01-$7F   next track
         $FE       deleted
         $FF       bad  
 
 
Controller has following properties:
 Reading/writing one bit takes 4us ~ 7 cycles.
 Reading/writing one byte takes 32us ~ 56 cycles

 Reading disk:
 Setting ReadDisk line low.
 It reads bits and shift them into 8 bit shift register until b7 (most significant bit) of shift register is set to '1'.
 When b7 is set, incoming zeroes are ignored.
 When next bit is '1', controller waits for another bit X then clears shift register, shift '1' and then X into shift register.
 That allows CPU to poll shift register content until b7 is set and then read a byte.

   read_floppy
      LDA $BFFE         ;5 floppy data port
      BPL read_floppy   ;3 wait till byte is complete (bit 7 set)
                        ;after b7 is set, controller will wait for '1' and 'X' bits before clearing register, giving at most 14 cycles to exit polling loop
                        
 Using pilot "byte" 111111110b (9bits) controller can synchronize. It takes 7 pilot bytes to be fully synchronized.
 
 Regular bytes are encode as in FM scheme: 1D1D1D1D, where D are data bits. So it takes two bytes on disk to store single data bit.
 Values $D5, $F5, $B5, $AD cannot occur in regular data so they are used as mark bytes to identify header and data sections.
 
 Pseudo code for reading data from single track/sector:
 
 _read_sector
          set ReadDisk line low
 _read_header
          read pilot subroutine
          check if next byte is $B5
          if not $B5 jump back to read header
          read 3 bytes into temporary area
          check that 3rd byte is $D5
          check that 1st byte xor 2nd byte is zero
          now, 1st byte is current track
          check we are on correct track, exit if no
 _read_data
          read pilot subroutine
          check if next byte is $AD
          if not go back to _read_data
          read 2816 bytes of data + 2 bytes of crc + 1 byte $D5
          compute crc, check last byte is $D5
          end
          
 _read_pilot
         read byte subroutine
         if byte is not $FF jump back to _read_pilot
 _read_pilot_sync        
         read byte subroutine
         if byte is $FF jump back to _read_pilot_sync
         if byte is not $D5 jump back to _read_pilot
         read byte subroutine
         if byte is not $F5 jump back to _read_pilot
         exit
         
 _read_byte
         poll shift register
         if bit 7 is set then increase byte_read_count and exit
         otherwise jump back to _read_byte
          
 timeout mechanism:
         fail read pilot after reading 65535 bytes (little bit more than eleven revolutions)
         
         
         
          
 
 Writing disk:
 Setting WriteDisk line low.
 When controller finds out WriteDisk line is low, it reads byte (8 bits) from data latch and reads 1 bit from signal pilot latch.
 Controller shifts all 8 bits to disk, if bit in signal pilot latch is set, it will write additional '0'. After last bit written, controller reads another byte from data latch and bit from signal pilot latch.
 
 Pseudo code
 
 _write_sector (assuming we are on correct track)
        jump to read header subroutine
        set read line high
        set write line low
        repeat 16 times:
          put $FF into data latch
          put '1' into pilot signal latch
          read shift register
          wait until lower 7 bits are reset: that means controller is going to output either 
                        1D (data byte with lowest bit reset) or 
                        D (data byte with lowest bit set) or 
                        10 (pilot signal)
                        in all cases controller will read data/pilot latch within no more than 2*4us ~ 14 cycles
                        wait some time and jump to repeat
        
       
        
 
