Frida
Frida is custom chip that cares about i/o and sound in Tonda 01 computer.

Pins:
0,1 - Vcc, Vss
2..12 - out: PR0|KR0, PR1|KR1, PR2|KR2, PR3|TO, PR4|JS0, PR5|JS1, PR6, PR7, P/S, KS, LED
13..20 - in: K0|J0, K1|J1, K2|J2, K3|J3, K4|J4, K5, K6|PB, TI|P/A
21..28 - in/out: D0..D7
29 - in: chip select /CS
30..32 - in: address A0..A2
33 - in: clock
34,35 - out: audio left/right
36,37 - in: potentiometr PX,PY
38 - in: RW
39 - in: RESET

Registers:
$C040 CONTROL  - LSK.CCCC - L..led, S..printer /strobe, K..keyboard/other select(KS), CCCC..sound channel select 3210
$C041 PX       - value reading from potentiometer
$C042 PY       - value reading from potentiometer
$C043 DATA     - write to PR0..PR7, JS0..JS1, KR0..KR2, TO 
               - read K0..K6, J0..J4, TI, P/A, PBS
$C044          - FREQHI - NVVVFFFF - N..noise on/off, VVV..volume 0..7, FFFF..high 4 bits of frequency
$C045          - FREQLO - low 8 bit of frequency
$C046          - WAVEHI - high wave sample 
$C047          - WAVELO - low wave sample 

DATA ($C043) read/write table

mode/bits      b7  b6  b5  b4  b3  b2  b1  b0

write          PR7 PR6 PR5 PR4 PR3 PR2 PR1 PR0
write          KR2 KR1 KR0 JS0 JS1 TO  --  --
read (KS=0)    TI  K6  K5  K4  K3  K2  K1  K0
read (KS=1)    P/A --  PBS J4  J3  J2  J1  J0


I/O

KEYBOARD
Tonda 01 has 55 key keyboards. 

Physical layout looks like this
+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
|    |  ! |  @ |  # |  $ |  % |  ^ |  & |  * |  ( |  ) |  _ |  { |  } |    |
| up |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |  0 |  - |  [ |  ] |del |
+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
  |    |  ~ |  ` |    |    |    |    |    |    |    |    |  + |    |    |
  |down|  Q |  W |  E |  R |  T |  Y |  U |  I |  O |  P |  = |left|rght|
  +----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    |    |    |    |    |    |    |    |    |  \ |  | |  : |  " |    |
    |ctrl|  A |  S |  D |  F |  G |  H |  J |  K |  L |  ; |  ' |ent |
    +----+----+----+----+----+----+----+----+----+----+----+----+----+
      |    |    |    |    |    |    |  £ |  © |  < |  > |  ? |    |
      |shft|  Z |  X |  C |  V |  B |  N |  M |  , |  . |  / |shft|
      +----+----+----+----+----+----+----+----+----+----+----+----+
                   |                                 |
                   |    space                        |
                   +---------------------------------+
                   
 In hardware, keyboard is matrix of seven columns and eight rows. 7x8 = 56 so one position in matrix is unused (indicated as <none> in table)
 
 Reading key:
 1) Write to DATA ($C043) row select KR2..KR0 (KKK.....)
 2) Write to CONTROL ($C040) bit 5 (KS) with bit reset
 3) Read from DATA ($C043) key state for selected row (.KKKKKKK)
 
 Row     KR2..KR0    bits 6      5      4      3      2      1      0
 
 0       %000             up     1      2      3      4      5      6
 1       %001             down   Q      W      E      R      T      Y    
 2       %010             ctrl   A      S      D      F      G      H    
 3       %011             lshf   Z      X      C      V      B      N
 4       %100             <none> spc    rshf   /      .      ,      M     
 5       %101             rght   ent    '      ;      L      K      J
 6       %110             del    left   =      P      O      I      U
 7       %111             ]      [      -      0      9      8      7
 
JOYSTICK 0/1

There are two joystick ports: J0 and J1.
Joystick port J0 is standard Atari joystick port with 5 digital inputs and two analog inputs.
Joystick port J1 is standard Atari joystick port with 5 digital inputs only.

Reading joystick digital input:
1) Write to DATA ($C043) joystick select JS0 (...10...) or JS1 (...01...)
2) Write to CONTROL ($C040) bit 5 (KS) with bit set
3) Read from DATA ($C043) key state for selected row (...FUDLR)

Reading joystick analog input:
1) Write anything to PX ($C041) or PY ($C042)
2) Wait at least 300 cycles
3) Read PX ($C041) or PY ($C042) - reading will be roughly between 19 to 213, when joystick is not connected reading will be 255 
 
PARALLEL PORT (PRINTER)

Parallel port has connected 8 data lines, /STROBE signal, /ACK signal, BUSY signal.

Send character to printer:
1) Write to DATA ($C043) character code
2) Write to CONTROL ($C040) bit 5 (KS) with bit set
3) Read from DATA ($C043) bit 5 (PBS), wait until it is low
4) Write to CONTROL ($C040) bit 6 (P/S) with bit set to signal /strobe
5) Wait at least 1us (2 cycles)
6) Write to CONTROL ($C040) bit 6 (P/S) with bit reset to deactivate /strobe
7) Poll b7 (/ACK) from DATA ($C043), printer will signal /ACK for about 5us (8 cycles)


TAPE IN/OUT

Read tape:
1) Write to CONTROL ($C040) bit 5 (KS) with bit reset
2) Poll bit 7 (TI) from DATA ($C043)

Write tape:
1) Write to DATA ($C043) with bit 2 (TO) set/reset


LED
Led diode is used to indicate CAPS lock but is fully programmable.

Setting Led diode on/off:
1) Write to CONTROL ($C040) bit 7 (LED), 0 for off, 1 for on


AUDIO
Frida provides 4 channels: A, B, C, D
Channels A,B are mixed together as first output and C,D are mixed together as second audio output. In normal circumstancies, these two audio lines are connected to internal speaker.  
Connecting 3.5mm stereo jack into AUDIO connector disables internal speaker. In such case, channels A,B are routed to left output and channels C,D are routed to right output.

Each channel is controlled by 4 registers:
$C044          - FREQHI - NVVVFFFF - N..noise on/off, VVV..volume 0..7, FFFF..high 4 bits of frequency
$C045          - FREQLO - low 8 bit of frequency
$C046          - WAVEHI - high wave sample 
$C047          - WAVELO - low wave sample 

FREQHI - channel control and 4 bits of frequency (pitch) control
FREQLO - lower 8 bits of frequency (pitch) control (write to FREQLO is latched and loaded when FREQHI is written)
WAVEHI - high wave form bits (write to WAVEHI is latched and loaded when FREQHI is written)
WAVELO - low wave form bits (write to WAVELO is latched and loaded when FREQHI is written)

FREQL and FREQH forms frequency divider (higher value means lower frequency/tone pitch) that gives pace at which two wave register, WAVEL and WAVEH registers are shifted.
When frequency is zero the clock is stopped
Most significant bits of WAVEL and WAVEH forms value 0..3 that gives output level for the particular channel.
This output level is multiplied by value VVV from FREQHI register.
When N bit is reset, most significant bit shifted out from WAVEL/WAVEH register and is put into bit 0. Effectively, the values in WAVEL/WAVEH registers are rotated.
When N bit is set, the shift register is turned into linear feedback register producing pseudorandom stream of bits.

To set a channel
1) select channel by writting to CONTROL ($C040) bits b3-b0 (....CCCC), channel to be written is indicated by bit set
2) set WAVELO ($C046), WAVEHI ($C046) 
   e.g. to set triangle wave 
   3 ..X.....
   2 .XXX....
   1 XXXXX...
   
   WAVEL = %10101000 
   WAVEH = %01110000
   
3) write lower 8 bits of frequency to FREQLO ($C045) 
4) write higher 4 bits of frequency, noise mode and volume to FREQHI ($C044).
   Bits are as follows: NVVVFFFF - N..noise, VVV..volume, FFFF..frequency
            
   pitch = 1.6122MHz / (8 * FREQ)
   
   FREQ = 1.6122MHz / (8 * pitch)
   
   Example:
   Note  Freq[Hz] FREQ RealHz
   (G1)  49.21    4095
   G#1   51.91    3882
   A1    55.00    3664
   A#1   58.27    3458
   B1    61.74    3264
   C2    65.41    3081*
   C3   130.8     1541*
   C4   261.6      418
   C5   523.3      209
   C6  1047        192* 
   C#6 1109        182*
   D6  1175        172*
   D#6 1245        162*
   E6  1319        153*
   F6  1397        144* 
   F#6 1480        136*
   G   1568        129*
   G#6 1661        121* 
   A6  1760        115 1764 (+0.2%)
   A#6 1865         59 1854 (-0.6%)
   B6  1976         55 1989 (+0.6%)
   C7  2093         52 2103 (+0.5%)  
   C#7 2217         49         
   D7  2349         47
   D#7 2489         44
   E7  2637         42
   
 
4) set volume 0..7 in VVV of AUD CTRL port
5) (optional) enable LFSR by setting N in AUD CTRL port


0,1 - Vcc, Vss
2..12 - out: PR0|KR0, PR1|KR1, PR2|KR2, PR3|TO, PR4|JS0, PR5|JS1, PR6, PR7, P/S, KS, LED
13..20 - in: K0|J0, K1|J1, K2|J2, K3|J3, K4|J4, K5, K6|PA, TI|P/A
21..28 - in/out: D0..D7
29 - in: chip select CS
30..32 - in: address A0..A2
33 - in: clock
34,35 - out: audio left/right
36,37 - in: potentiometr PX,PY
38 - in: RW
39 - in: RESET




